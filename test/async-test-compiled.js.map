{"version":3,"sources":["async-test.js"],"names":[],"mappings":"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","file":"async-test-compiled.js","sourcesContent":["import co from  \"co\";\nimport chai from \"chai\"\nimport expect from \"chai.expect\";\nvar mocha = require('mocha')\nvar coMocha = require('co-mocha');\ncoMocha(mocha);\n\ndescribe(\"New customer\", function() {\n\n    var Customer = function(name){\n        this.name = name;\n        this.accounts = [];\n\n        this.addAccount = (acc) => {\n\n            return new Promise((resolve, reject) => {\n               this.accounts[this.accounts.length] = acc;\n               resolve(this.accounts);\n            });\n        };\n    };\n\n    Customer.prototype.create = function(name){\n        return new Promise(function(resolve, reject) {\n            resolve(new Customer(name));\n        });\n    };\n\n    var Business = function (name) {\n        this.name = name;\n        this.customers = [];\n\n        this.addCustomer = (name) => {\n\n            return new Promise((resolve, reject) => {\n                    this.customers.push(name);\n                    resolve(this.customers);\n                });\n        };\n\n    };\n\n    Business.prototype.create = function(name){\n        return Promise.resolve(new Business(name));\n    };\n\n    var Account = function (customer, business, amt=0){\n        this.customer = customer;\n        this.business = business;\n        this.amount = amt;\n        this.setAmount = (amt) => Promise.resolve(this.amount=amt);\n    };\n\n    Account.prototype.create = function(customer, business){\n        return Promise.resolve(new Account(customer, business));\n    };\n    var business, businessApple;\n    var customer;\n    var account, accountApple;\n\n    before(function *() {\n        business =  yield Business.prototype.create(\"FooBar Inc\");\n        businessApple = yield Business.prototype.create(\"Apple Inc\");\n        customer = yield Customer.prototype.create(\"Adam Moon\");\n        account = yield Account.prototype.create(customer, business);\n        accountApple = yield Account.prototype.create(customer, businessApple);\n    });\n\n    it(\"customer should have 1 account with business of 'FooBar Inc'\", function *() {\n        yield customer.addAccount(account);\n        expect(customer.accounts.length).to.be.equal(1);\n        expect(customer.accounts[0].business.name).to.be.equal(\"FooBar Inc\");\n\n    });\n\n    it(\"customer should have 1 account with initial balance of 0\", function *()\n    {\n        expect(customer.accounts[0].amount).to.be.equal(0);\n    });\n\n    it(\"customer should have 2 accounts with 2nd account business being Apple\", function *() {\n        yield customer.addAccount(accountApple);\n        expect(customer.accounts.length).to.be.equal(2);\n        expect(customer.accounts[1].business.name).to.be.equal(\"Apple Inc\");\n    });\n\n    it(\"business should have 1 customer\", function *() {\n        yield business.addCustomer(customer);\n        expect(business.customers.length).to.be.equal(1);\n    });\n\n    it(\"businessApple should have 1 customer\", function *() {\n        yield businessApple.addCustomer(customer);\n        expect(businessApple.customers.length).to.be.equal(1);\n    });\n\n    it(\"set Amount for customer's businessApple account\", function *() {\n        yield customer.accounts[1].setAmount(100);\n        expect(customer.accounts[1].amount).to.be.equal(100);\n    });\n\n\n});"]}